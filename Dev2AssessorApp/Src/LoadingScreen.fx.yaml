LoadingScreen As screen:
    OnVisible: |-
        =//CSS
        Set(
            Dashboard,
            {
                HeaderFooterFont: "Roboto Bold",
                HeaderFooterFill: RGBA(
                    220,
                    0,
                    0,
                    1
                ),
                IDFont: "Roboto Medium",
                HeaderFooterFontSize: 20,
                FontSize: 30
            }
        );
        Set(
            Label,
            {
                Font: "Roboto Regular",
                Color: "RGBA(0, 0, 0, 1)",
                FontSize: 25,
                FontWeight: "bold"
            }
        );
        Set(
            Count,
            {
                Font: "Roboto Medium",
                Color: "DC0000",
                FontSize: 20
            }
        )

    ImgLS As image:
        Height: =Parent.Height
        Image: ='042 splash-2x'
        ImagePosition: =ImagePosition.Fill
        Width: =Parent.Width
        ZIndex: =1

    TimerLS As timer:
        AutoStart: =true
        Duration: =6000
        OnTimerEnd: |-
            =//Navigate(DashboardScreen)
            Navigate(DashboardScreen)
        Start: =true
        Visible: =false
        X: =40
        Y: =40
        ZIndex: =2

    PatchTimer As timer:
        AutoStart: |-
            =//Istimer = true
            false
        Duration: =600000
        OnTimerStart: |-
            =/*If(
                Connection.Connected ,
                Notify("Network Connected...",NotificationType.Error);
                If(
                    !IsBlank(LookUp(gcProjectAssignment,AstatusUpdate = 0))            ||
                    !IsBlank(LookUp(GC_bankAssessment,BstatusUpdate = 0))              ||
                    !IsBlank(LookUp(GC_unitAssessment,UstatusUpdate = 0))              ||
                    !IsBlank(LookUp(GcSectionAssessment,SstatusUpdate = 0))            ||
                    !IsBlank(LookUp(GcCheckpointAssessment,CstatusUpdate = 0))         ||
                    !IsBlank(LookUp(GC_checkpointItemAssessment,CIstatusUpdate = 0))   ||
                    !IsBlank(LookUp(GC_checkpointItem_ActionItem,CIAstatusUpdate = 0)) ||
                    !IsBlank(LookUp(GC_checkpointItem_Images,CIIstatusUpdate = 0)) ,  
                    
                    Notify("Patching data collection to dataverse.");
                
            // for updating status of Assignments in collection
            // When first time status of assessment becomes inprogress then set a flag and update the status of dataverse tables - bank,section,checkpoint and assignment to inprogress . The flag is used to nevigate to dashboard when status of assignment changes so that the count for upcoming and inprogress assessment is correctly updated.  Otherwise it is crashing. 
            //for project assessment status 
            Concurrent(
            
            ForAll(
                    Filter(
                        gcProjectAssignment,
                        AstatusUpdate = 0
                    ) As i,
                    UpdateIf(
                        assignments,
                        Id = i.Id,
                        {isCompleted: i.isCompleted}
                    );
            //status 2(patch to dataverse) update to collection
            UpdateIf(
                        gcProjectAssignment,
                        Id = i.Id && AstatusUpdate = 0,
                        {AstatusUpdate: 1}
                    );
                );,
                
            //for bank assessment status
            ForAll(
                    Filter(
                        GC_bankAssessment,
                        BstatusUpdate = 0
                    ) As i,
                    UpdateIf(
                        bankAssessment,
                        'bankAssessment (quantum_bankassessment)' = i.'bankAssessment (quantum_bankassessment)',
                        {Assessment_Status: i.Assessment_Status}
                    );
                            //status 2(patch to dataverse) update to collection
            UpdateIf(
                        GC_bankAssessment,
                        'bankAssessment (quantum_bankassessment)' = i.'bankAssessment (quantum_bankassessment)' && BstatusUpdate = 0,
                        {BstatusUpdate: 1}
                    );
                ),
            
                 
            //for unit assessment status
            ForAll(
                    Filter(
                        GC_unitAssessment,
                        UstatusUpdate = 0
                    ) As i,
                    UpdateIf(
                        unitAssessment,
                        'unitAssessment (quantum_unitassessment)' = i.'unitAssessment (quantum_unitassessment)',
                        {Assessment_status: i.Assessment_status}
                    );
                                //status 2(patch to dataverse) update to collection
            UpdateIf(
                        GC_unitAssessment,
                        'unitAssessment (quantum_unitassessment)' = i.'unitAssessment (quantum_unitassessment)' && UstatusUpdate = 0,
                        {UstatusUpdate: 1}
                    );
                ) );
                
            // Take each row of the collection GcSectionAssessment and check if this is the current section . If so check if the row representing  status of that section is present in the  dataverse table SectionAssessment. Insert if not found else next statement.
            //Concurrent(
            ForAll(
                    Filter(
                        GcSectionAssessment,
                        SstatusUpdate = 0
                    ) As i,
                    If(
                        IsBlank(
                            LookUp(
                                sectionAssessment,
                                'sectionAssessment (quantum_sectionassessment)' = i.'sectionAssessment (quantum_sectionassessment)'
                            )
                        ) ,
                        Patch(
                            sectionAssessment,
                            Defaults(sectionAssessment),
                            {
                                'sectionAssessment (quantum_sectionassessment)': i.'sectionAssessment (quantum_sectionassessment)',
                                assignmentId: LookUp(
                                    assignments,
                                    Id = i.assignmentId.Id
                                ),
                                bankUnitId: LookUp(
                                    bankUnits,
                                    Id = i.bankUnitId.Id
                                ),
                                product_id: LookUp(
                                    product,
                                    'product (quantum_product)' = i.product_id.'product (quantum_product)'
                                ),
                                sectionId: LookUp(
                                    templateSections,
                                    sectionId = i.sectionId.sectionId
                                ),
                                sectionName: i.sectionName,
                                AssessmentStatus: i.AssessmentStatus
                            }
                        )
                    );
                        //status 2(patch to dataverse) update to collection
            UpdateIf(
                        GcSectionAssessment,
                        'sectionAssessment (quantum_sectionassessment)' = i.'sectionAssessment (quantum_sectionassessment)' && SstatusUpdate = 0,
                        {SstatusUpdate: 1}
                    );
                );
               
                
            // For each row in collection GcCheckpointAssessment check if this row is the current checkpoint and insert a row in dataverse table CheckpointAssessment representing status of that checkpoint.Insert if not found else next statement.
            ForAll(
                    Filter(
                        GcCheckpointAssessment,
                        CstatusUpdate = 0
                    ) As a,
                    If(
                        IsBlank(
                            LookUp(
                                checkpointAssessment,
                                checkpointAssessment_id = a.checkpointAssessment_id
                            )
                        ) ,
                        Patch(
                            checkpointAssessment,
                            Defaults(checkpointAssessment),
                            {
                                checkpointAssessment_id: a.checkpointAssessment_id,
                                assignmentId: LookUp(
                                    assignments,
                                    Id = a.assignmentId.Id
                                ),
                                bankUnitId: LookUp(
                                    bankUnits,
                                    Id = a.bankUnitId.Id
                                ),
                                product_id: LookUp(
                                    product,
                                    'product (quantum_product)' = a.product_id.'product (quantum_product)'
                                ),
                                sectionId://a.sectionId
                                LookUp(
                                    sectionAssessment,
                                    'sectionAssessment (quantum_sectionassessment)' = a.sectionId.'sectionAssessment (quantum_sectionassessment)'
                                ),
                                checkpointId: LookUp(
                                    templateCheckpoints,
                                    checkpointId = a.checkpointId.checkpointId
                                ),
                                checkpointName: a.checkpointName,
                                AssessmentStatus: a.AssessmentStatus
                            }
                        );
                    );
            
             //status 2(patch to dataverse) update to collection
            UpdateIf(
                        GcCheckpointAssessment,
                        checkpointAssessment_id = a.checkpointAssessment_id && CstatusUpdate = 0,
                        {CstatusUpdate: 1}
                    );
                );
                
            // For each row in collection GcCheckpointItemAssessment check if this rows are the current checkpointItems of current checkpoint  and insert a row in dataverse table CheckpointItemAssessment representing status of that checkpointItem.Insert if not found else update that rows.
            ForAll(
                    Filter(
                        GC_checkpointItemAssessment,
                        CIstatusUpdate = 0
                    ) As a,
                    If(
                        !IsBlank(
                            LookUp(
                                checkpointItemAssessment,
                                'checkpointItemAssessment (quantum_checkpointitemassessment)' = a.'checkpointItemAssessment (quantum_checkpointitemassessment)'
                            )
                        ),
                        UpdateIf(
                            checkpointItemAssessment,
                            'checkpointItemAssessment (quantum_checkpointitemassessment)' = a.'checkpointItemAssessment (quantum_checkpointitemassessment)',
                            {
                                
                                checkpointItem_annotation: a.checkpointItem_annotation,
                                assessmentStatus: a.assessmentStatus
                            }
                        );
                        ,
                        Patch(
                            checkpointItemAssessment,
                            Defaults(checkpointItemAssessment),
                            {
                                'checkpointItemAssessment (quantum_checkpointitemassessment)': a.'checkpointItemAssessment (quantum_checkpointitemassessment)',
                                checkpointAssessment_Id://a.checkpointAssessment_Id
                                 LookUp(
                                    checkpointAssessment,
                                    checkpointAssessment_id = a.checkpointAssessment_Id.checkpointAssessment_id
                                ),
                                assignmentId: LookUp(
                                    assignments,
                                    Id = a.assignmentId.Id
                                ),
                                bankUnitId: LookUp(
                                    bankUnits,
                                    Id = a.bankUnitId.Id
                                ),
                                product_id: LookUp(
                                    product,
                                    'product (quantum_product)' = a.product_id.'product (quantum_product)'
                                ),
                                section_Id://a.section_Id
                                 LookUp(
                                    sectionAssessment,
                                    'sectionAssessment (quantum_sectionassessment)' = a.section_Id.'sectionAssessment (quantum_sectionassessment)'
                                ),
                                checkpointItem_annotation: a.checkpointItem_annotation,
                                checkpointItemId: LookUp(
                                    templateCheckpointsItems,
                                    checkpointItemId = a.checkpointItemId.checkpointItemId
                                ),
                                checkpointItemName: a.checkpointItemName,
                                assessmentStatus: a.assessmentStatus
                            }
                        );
                    );
                    //status 2(patch to dataverse) update to collection
            UpdateIf(
                        GC_checkpointItemAssessment,
                        'checkpointItemAssessment (quantum_checkpointitemassessment)' = a.'checkpointItemAssessment (quantum_checkpointitemassessment)' && CIstatusUpdate = 0,
                        {CIstatusUpdate: 1}
                    );
                );
                //);
                
            // For each row in collection GcCheckpointItem_ActionItem check if this rows are the current checkpointItem of current checkpoint and insert a row in dataverse table CheckpointItemAssessment representing status of that checkpointItem.Insert if not found else update that rows.
            //Concurrent(
            ForAll(
                    Filter(
                        GC_checkpointItem_ActionItem,
                        CIAstatusUpdate = 0
                    ) As i,
                    If(
                        !IsBlank(
                            LookUp(
                                checkpointItem_ActionItem,
                                checkpointItemActionItemsId = i.checkpointItemActionItemsId
                            )
                        ) ,
                        UpdateIf(
                            checkpointItem_ActionItem,
                            checkpointItemActionItemsId = i.checkpointItemActionItemsId,
                            {
                                ActionItem_Name: i.ActionItem_Name,
                                priority: i.priority,
                                OwnerId: i.OwnerId,
                                TimeEstimate: i.TimeEstimate,
                                MaterialEstimate: i.MaterialEstimate,
                                Action_status: i.Action_status
                              
                            }
                        );
                        ,
                        Patch(
                            checkpointItem_ActionItem,
                            Defaults(checkpointItem_ActionItem),
                            {
                                checkpointItemActionItemsId: i.checkpointItemActionItemsId,
                                ActionItem_Name: i.ActionItem_Name,
                                assignmentId: LookUp(
                                    assignments,
                                    Id = i.assignmentId.Id
                                ),
                                bankId: LookUp(
                                    schindlerBanks,
                                    Id = i.bankId.Id
                                ),
                                bankUnitId: LookUp(
                                    bankUnits,
                                    Id = i.bankUnitId.Id
                                ),
                                section_id: LookUp(
                                    sectionAssessment,
                                    'sectionAssessment (quantum_sectionassessment)' = i.section_id.'sectionAssessment (quantum_sectionassessment)'
                                ),
                                checkpoint_id: LookUp(
                                    checkpointAssessment,
                                    checkpointAssessment_id = i.checkpoint_id.checkpointAssessment_id
                                ),
                                checkpointItem_Id: LookUp(
                                    checkpointItemAssessment,
                                    'checkpointItemAssessment (quantum_checkpointitemassessment)' = i.checkpointItem_Id.'checkpointItemAssessment (quantum_checkpointitemassessment)'
                                ),
                                product_id: LookUp(
                                    product,
                                    'product (quantum_product)' = i.product_id.'product (quantum_product)'
                                ),
                                priority: i.priority,
                                OwnerId: i.OwnerId,
                                TimeEstimate: i.TimeEstimate,
                                MaterialEstimate: i.MaterialEstimate,
                                Action_status: i.Action_status
                            }
                        )
                    );
                    //status 2(patch to dataverse) update to collection
            UpdateIf(
                        GC_checkpointItem_ActionItem,
                        checkpointItemActionItemsId = i.checkpointItemActionItemsId && CIAstatusUpdate = 0,
                        {CIAstatusUpdate: 1}
                    );
                );
                //,
                
            //for checkpoint images
            ForAll(
                    Filter(
                        GC_checkpointItem_Images,
                        CIIstatusUpdate = 0
                    ) As i,
                    If(
                        !IsBlank(
                            LookUp(
                                checkpointItem_Images,
                                checkpointItemImagesId = i.checkpointItemImagesId
                            )
                        ),
                        UpdateIf(
                            checkpointItem_Images,
                            checkpointItemImagesId = i.checkpointItemImagesId,
                            {
                                Image: i.Image,
                                image_annotation: i.image_annotation
                            }
                        );
                        ,
                        Patch(
                            checkpointItem_Images,
                            Defaults(checkpointItem_Images),
                            {
                                checkpointItemImagesId: i.checkpointItemImagesId,
                                assignmentId: LookUp(
                                    assignments,
                                    Id = i.assignmentId.Id
                                ),
                                bankUnitId: LookUp(
                                    bankUnits,
                                    Id = i.bankUnitId.Id
                                ),
                                section_id: LookUp(
                                    sectionAssessment,
                                    'sectionAssessment (quantum_sectionassessment)' = i.section_id.'sectionAssessment (quantum_sectionassessment)'
                                ),
                                checkpoint_id: LookUp(
                                    checkpointAssessment,
                                    checkpointAssessment_id = i.checkpoint_id.checkpointAssessment_id
                                ),
                                checkpointItem_Id: LookUp(
                                    checkpointItemAssessment,
                                    'checkpointItemAssessment (quantum_checkpointitemassessment)' = i.checkpointItem_Id.'checkpointItemAssessment (quantum_checkpointitemassessment)'
                                ),
                                product_id: LookUp(
                                    product,
                                    'product (quantum_product)' = i.product_id.'product (quantum_product)'
                                ),
                                Image: i.Image,
                                image_annotation: i.image_annotation
                            }
                        )
                    );
                    //status 2(patch to dataverse) update to collection
            UpdateIf(
                        GC_checkpointItem_Images,
                        checkpointItemImagesId = i.checkpointItemImagesId && CIIstatusUpdate = 0,
                        {CIIstatusUpdate: 1}
                    );
                );
            //    );
            
                Notify(" Patch end");
                
                );,
                Notify("network not connected",NotificationType.Warning)
            );
            */
        Start: |-
            =//Istimer = true
            false
        Visible: =false
        X: =60
        Y: =60
        ZIndex: =3

    lblappVersion As label:
        FontWeight: =FontWeight.Bold
        Height: =47
        Text: ="   UAT 1.0"
        Width: =120
        X: =(Parent.Width-Self.Width)/2
        Y: =Parent.Height/1.5
        ZIndex: =4


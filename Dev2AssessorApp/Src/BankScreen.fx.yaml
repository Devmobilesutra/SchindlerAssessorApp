BankScreen As screen:
    Fill: =
    OnVisible: |
        =Set(varComment,false);
        Set(popupSyncSuccess,false);
        Trace(
            First(gcBank).productId.product_Model,
            TraceSeverity.Information
        );

    ctnMainBankBS As groupContainer.manualLayoutContainer:
        Height: =Parent.Height
        Width: =Parent.Width
        ZIndex: =2

        ctnMiddleBS As groupContainer.verticalAutoLayoutContainer:
            Height: =Parent.Height
            LayoutDirection: =LayoutDirection.Vertical
            LayoutMode: =LayoutMode.Auto
            LayoutOverflowY: =LayoutOverflow.Scroll
            PaddingLeft: =20
            PaddingRight: =20
            PaddingTop: =20
            Width: =Parent.Width
            Y: |+
                =ctnHeaderBS.Height
                
                
            ZIndex: =1

            ctnBackBS As groupContainer.verticalAutoLayoutContainer:
                Height: =ctnHeaderBS.Height
                LayoutMode: =LayoutMode.Auto
                PaddingBottom: =5
                Width: =Parent.Width
                Y: =ctnHeaderBS.Height+ctnHeaderBS.Y
                ZIndex: =1

                ctnBackButtonBS As groupContainer.verticalAutoLayoutContainer:
                    Height: =80
                    LayoutDirection: =LayoutDirection.Vertical
                    LayoutGap: =10
                    LayoutJustifyContent: =LayoutJustifyContent.Center
                    LayoutMode: =LayoutMode.Auto
                    LayoutWrap: =true
                    PaddingLeft: =40
                    Width: =Parent.Width
                    Y: =ctnHeaderPS.Y+ctnHeaderPS.Height
                    ZIndex: =1

                    btnBackButtonBS As button:
                        BorderColor: =AllScreensCSS.RActiveColor
                        Color: =RGBA(0, 0, 0, 1)
                        DisabledColor: =RGBA(0, 0, 0, 1)
                        DisabledFill: =RGBA(0, 0, 0, 0)
                        Fill: =RGBA(0, 0, 0, 0)
                        Height: =ctnBackButtonBS.Height/1.5
                        HoverColor: =RGBA(0, 0, 0, 1)
                        HoverFill: =
                        OnSelect: =Navigate(ProjectScreen)
                        PaddingBottom: =10
                        PaddingLeft: =20
                        PaddingRight: =10
                        PaddingTop: =10
                        PressedFill: =
                        RadiusBottomLeft: =0
                        RadiusBottomRight: =0
                        RadiusTopLeft: =0
                        RadiusTopRight: =0
                        Size: =AllScreensCSS.RLabelFontSize-2
                        Text: ="Back"
                        Width: =ctnBackButtonBS.Width/6
                        ZIndex: =1

                    TimerglryUnitBS As timer:
                        AutoStart: =true
                        Duration: =100
                        OnTimerEnd: =Set(Q,true)
                        Visible: =false
                        ZIndex: =2

            ctnClintNameBS As groupContainer.horizontalAutoLayoutContainer:
                Height: =Parent.Height/6.5
                LayoutDirection: =LayoutDirection.Vertical
                LayoutMode: =LayoutMode.Auto
                Width: =Parent.Width
                Y: |
                    =ctnHeaderBS.Height
                ZIndex: =2

                ctnGonumberBS As groupContainer.verticalAutoLayoutContainer:
                    Height: =Parent.Height/2.8
                    LayoutDirection: =LayoutDirection.Vertical
                    LayoutMode: =LayoutMode.Auto
                    Width: =Parent.Width
                    ZIndex: =1

                    lblGonumber1BS As label:
                        Font: =AllScreensCSS.RFont
                        FontWeight: =FontWeight.Semibold
                        Height: =ctnGonumberBS.Height
                        PaddingLeft: =20
                        Size: =AllScreensCSS.RLabelFontSize
                        Text: |-
                            ="G.O./Commission number :   " & lblBankName.Text
                        Width: =Parent.Width/2
                        X: |
                            =lblAssessmentBS_2.X+lblAssessmentBS_2.Width
                        ZIndex: =1

                ctnbankBS As groupContainer.horizontalAutoLayoutContainer:
                    Height: =Parent.Height/1.8
                    LayoutAlignItems: =LayoutAlignItems.Center
                    LayoutGap: =10
                    LayoutMode: =LayoutMode.Auto
                    Width: =Parent.Width
                    ZIndex: =2

                    lblAssStatusBS As label:
                        Font: =AllScreensCSS.RFont
                        FontWeight: =FontWeight.Bold
                        Height: =Parent.Height
                        Size: =AllScreensCSS.RLabelFontSize
                        Text: |-
                            =//If selected assignment is completed assignment then display assessor name in completed tab
                            If(
                                comp = true,
                                "Assessment by                     :   " & glryProject.Selected.assessorName,
                                "   " & LookUp(
                                    gcBank,
                                    Id = VarBankId,
                                    productId.product_Model
                                ) & " series"
                            )
                        Width: =If(Parent.Width>800,Parent.Width/1.9,Parent.Width/2.3)
                        ZIndex: =3

                    btnProjecttypeBS As button:
                        BorderColor: =(Self.Fill)
                        BorderThickness: =0
                        DisplayMode: =DisplayMode.View
                        Fill: =RGBA(252, 165, 50, 1)
                        Height: =50
                        HoverFill: =Self.Fill
                        OnSelect: =
                        Text: =btnprojecttype.Text
                        Width: =260
                        X: =
                        Y: =
                        ZIndex: =5

                    btnTripReportBS As button:
                        BorderColor: =Self.Fill
                        DisplayMode: |-
                            =//if assesment status is Inprogress or completed then we click generate/edit/view trip report else assessment status is upcomming then button is disable (network required) 
                            If(Connection.Connected,
                            If(
                                CountRows(
                                    Filter(
                                        unitAssessment,
                                        assignmentId.Id = varAssignmentId
                                    )
                                ) = CountRows(
                                    Filter(
                                        unitAssessment,
                                        (assignmentId.Id = varAssignmentId && Assessment_status = "Inprogress") ||
                                        (assignmentId.Id = varAssignmentId && Assessment_status = "Completed")
                                    )
                                ),
                                DisplayMode.Edit,
                                DisplayMode.Disabled
                            ),
                            DisplayMode.Disabled
                            )
                        Fill: =AllScreensCSS.RActiveColor
                        Font: =AllScreensCSS.RFont
                        Height: =50
                        HoverFill: =Self.Fill
                        OnSelect: |+
                            =Set(
                                varReportPopup,
                                false
                            );
                            Set(popupTripReportSuccess,false);
                            
                            Refresh(BankTripReport);
                            
                            //check checkpointItem ActionItem collection is empty or not if empty then load data from cache (only first time load )
                            If(
                                IsEmpty(GC_checkpointItem_ActionItem),
                                LoadData(
                                    GC_checkpointItem_ActionItem,
                                    "localcheckpointitemactionitem",
                                    true
                                );
                                
                            );
                            
                            Clear(tempdata);
                            ForAll(
                                Filter(
                                    gcAssignmentunit,
                                    assignmentId.Id = varAssignmentId
                                ) As i,
                                If(
                                    CountRows(
                                        Filter(
                                            GC_checkpointItem_ActionItem,
                                            bankUnitId.Id = i.bankUnitId.Id
                                        )
                                    ) < 1,
                                    Collect(
                                        tempdata,
                                        i.bankUnitId.Id
                                    );
                                )
                            );
                            If(
                                CountRows(tempdata) < 1,
                                If(
                                    IsBlank(
                                        LookUp(
                                            BankTripReport,
                                            assignmentId.Id = glryProject.Selected.Id && bankId.Id = glryProject.Selected.bankId.Id
                                        )
                                    ),
                                    Set(
                                        VarTripReportNotification,
                                        "Trip report saved successfully."
                                    ),
                                    ClearCollect(localBanktripReport, LookUp(
                                            BankTripReport,
                                            assignmentId.Id = glryProject.Selected.Id && bankId.Id = glryProject.Selected.bankId.Id
                                        ));
                                    Set(
                                        VarTripReportNotification,
                                        "Trip report Update successfully."
                                    )
                                );
                                ClearCollect(localCollectionAction,
                                Sort(
                                Sort(
                                    GroupBy(
                                        AddColumns(
                                            Filter(
                                                GC_checkpointItem_ActionItem,
                                                (assignmentId.Id = glryProject.Selected.Id && CIAstatusUpdate = 2 && priority = "High")
                                            ),
                                            "unit",
                                            bankUnitId.Id,
                                            "section",
                                            section_id.sectionName,
                                            "sectionSequence",
                                            section_id.sectionSequence
                                        ),
                                        "unit",
                                        "section",
                                        "sectionSequence",
                                        "data"
                                    ),
                                    sectionSequence,
                                    Ascending
                                ),
                                LookUp(
                                    gcBankunit,
                                    Id = unit,
                                    unitNumber
                                ),
                                Ascending
                            ););
                                Navigate(TripReportScreen);
                                ,
                                Set(VarPopupSyncText,"Assessment records are not found in your local device . please click each unit to get assessment records from server .");
                                Set(popupTripReportSuccess,true);
                            
                            );
                            
                        PaddingLeft: =0
                        PaddingRight: =0
                        PressedColor: =Self.Color
                        PressedFill: =Self.Fill
                        Size: =AllScreensCSS.RfontsizeInput
                        Text: |-
                            =If(Connection.Connected,
                            If(comp=true,
                            "View Report",
                            If(IsBlank(LookUp(
                                BankTripReport,
                                assignmentId.Id = glryProject.Selected.Id && bankId.Id = glryProject.Selected.bankId.Id
                            )),"Generate Report","Edit Report")),
                            "Trip Report")
                        Width: =Parent.Width/6.5
                        ZIndex: =6

            ctnunitAssessmentBS As groupContainer.verticalAutoLayoutContainer:
                Height: =Parent.Height
                LayoutDirection: =LayoutDirection.Vertical
                LayoutMode: =LayoutMode.Auto
                Width: =Parent.Width
                Y: =ctnClintNameBS.Height
                ZIndex: =3

                glryUnitBS As gallery.variableTemplateHeightGallery:
                    Fill: =RGBA(237, 237, 237, 1)
                    Height: =CountRows(glryUnitBS.AllItems)*glryUnitBS.TemplateHeight
                    Items: |-
                        =//check comp variable is true or false if true then dislay data from assignmentUnit Dataverse table else check inpro or upcomp variable is true if one of them is true then display data from gcAssignmentunit collection
                        If(
                            comp = true,
                            Sort(
                                Filter(
                                    assignmentUnits,
                                    assignmentId.Id = glryProject.Selected.Id
                                ),
                                bankUnitId.unitNumber,
                                Ascending
                            ),
                            If(
                                inpro = true || upcomp = true,
                                Sort(
                                    Filter(
                                        gcAssignmentunit,
                                        assignmentId.Id = glryProject.Selected.Id
                                    ),
                                    bankUnitId.unitNumber,
                                    Ascending
                                )
                            )
                        )
                    Layout: =Layout.Vertical
                    LoadingSpinner: =LoadingSpinner.Controls
                    ShowScrollbar: =false
                    TemplateSize: =600
                    Visible: =Q
                    Width: =Parent.Width/1.05
                    Y: =ctnHeaderBS.Height+300
                    ZIndex: =1

                    lblProductNameBS As label:
                        AutoHeight: =true
                        FontWeight: =FontWeight.Semibold
                        OnSelect: =Select(Parent)
                        Size: =16
                        Text: ="Unit  " & ThisItem.bankUnitId.unitNumber  
                        Width: =255
                        X: =22
                        Y: =27
                        ZIndex: =1

                    RectanglebroderBS As rectangle:
                        BorderColor: =RGBA(179, 179, 179, 1)
                        BorderThickness: =2
                        Fill: =RGBA(179, 179, 179, 1)
                        Height: =2
                        Width: =glryUnitBS.Width/1.06
                        X: =30
                        Y: =86
                        ZIndex: =2

                    btnStartAssessmentBS As button:
                        Fill: =AllScreensCSS.RActiveColor
                        Font: =AllScreensCSS.RFont
                        Height: =50
                        HoverColor: =Self.Color
                        HoverFill: =Self.Fill
                        OnSelect: |
                            =//for safety check to show default selected
                            If(
                                IsEmpty(GcSectionAssessment) && IsEmpty(GcCheckpointAssessment) && IsEmpty(GC_checkpointItemAssessment) && IsEmpty(GC_checkpointItem_ActionItem) && IsEmpty(GC_checkpointItem_Images),
                               Concurrent(
                                    LoadData(
                                        GcSectionAssessment,
                                        "localsectionassessment",true
                                    );
                                   ,
                                    LoadData(
                                        GcCheckpointAssessment,
                                        "localcheckpointassessment",true
                                    );
                                    ,
                                    LoadData(
                                        GC_checkpointItemAssessment,
                                        "localcheckpointitemassessment",true
                                    );
                                    ,
                                    LoadData(
                                        GC_checkpointItem_ActionItem,
                                        "localcheckpointitemactionitem",true
                                    );
                                    ,
                                    LoadData(
                                        GC_checkpointItem_Images,
                                        "localcheckpointitemimage",true
                                    );
                                
                            );
                            );
                            //Here we check if network is available or not, if available then check collection is empty or not ,if collection is empty then get specific assessor data from dataverse and store it into collection and save collection to cache
                            If(
                                Connection.Connected,
                                Concurrent(
                                    //Section assessment transaction data
                                    If(
                                        IsEmpty(GcSectionAssessment),
                                        ClearCollect(
                                            GcSectionAssessmentAdd,
                                            Filter(
                                                sectionAssessment,
                                                //assignmentId.assessorId = varLoggedAssessor
                                                bankUnitId.Id = ThisItem.bankUnitId.Id
                                            )
                                        );
                                       //Adding column for status maintain
                            ClearCollect(
                                            GcSectionAssessment,
                                            AddColumns(
                                                GcSectionAssessmentAdd,
                                                "SstatusUpdate",
                                                2
                                            )
                                        );,
                                        //Notify("section data  from dataverse",NotificationType.Information);
                                             
                                        If(
                                            CountRows(
                                                Filter(
                                                    GcSectionAssessment,
                                                    bankUnitId.Id = ThisItem.bankUnitId.Id
                                                )
                                            )<1,
                                            ClearCollect(
                                                GcSectionAssessmentTemp,
                                                Filter(
                                                    sectionAssessment,
                                                //assignmentId.assessorId = varLoggedAssessor
                                                    bankUnitId.Id = ThisItem.bankUnitId.Id
                                                )
                                            );
                                        //    Notify("Unit data of section inserted from dataverse",NotificationType.Information);
                                            ForAll(
                                                GcSectionAssessmentTemp As i,
                                                Patch(
                                                    GcSectionAssessment,
                                                    Defaults(GcSectionAssessment),
                                                    {
                                                        'sectionAssessment (quantum_sectionassessmentid)': i.'sectionAssessment (quantum_sectionassessmentid)',
                                                        'sectionAssessment (quantum_sectionassessment)': i.'sectionAssessment (quantum_sectionassessment)',
                                                        assignmentId: i.assignmentId,
                                                        bankUnitId: i.bankUnitId,
                                                        product_id: i.product_id,
                                                        sectionId: i.sectionId,
                                                        sectionName: i.sectionName,
                                                        AssessmentStatus: i.AssessmentStatus,
                                                        SstatusUpdate: 2,
                                                        sectionSequence: i.sectionSequence,
                                                        sectionComment: i.sectionComment
                                                    }
                                                )
                                            );
                                           );
                                    );
                                    ,
                                    //Checkpoint assessment transaction data
                                    If(
                                        IsEmpty(GcCheckpointAssessment),
                                        ClearCollect(
                                            GcCheckpointAssessmentAdd,
                                            Filter(
                                                checkpointAssessment,
                                                bankUnitId.Id = ThisItem.bankUnitId.Id
                                            )
                                        );
                                            //Adding column for status maintain
                            ClearCollect(
                                            GcCheckpointAssessment,
                                            AddColumns(
                                                GcCheckpointAssessmentAdd,
                                                "CstatusUpdate",
                                                2
                                            )
                                        );,
                                        If(
                                            CountRows(
                                                 Filter(
                                                    GcCheckpointAssessment,
                                                    bankUnitId.Id = ThisItem.bankUnitId.Id
                                                )
                                            )<1,
                                            ClearCollect(
                                                GcCheckpointAssessmentTemp,
                                                Filter(
                                                    checkpointAssessment,
                                                    bankUnitId.Id = ThisItem.bankUnitId.Id
                                                )
                                            );
                                            ForAll(
                                                GcCheckpointAssessmentTemp As i,
                                                Patch(
                                                    GcCheckpointAssessment,
                                                    Defaults(GcCheckpointAssessment),
                                                    {
                                                        checkpointAssessment: i.checkpointAssessment,
                                                        checkpointAssessment_id: i.checkpointAssessment_id,
                                                        assignmentId: i.assignmentId,
                                                        bankUnitId: i.bankUnitId,
                                                        product_id: i.product_id,
                                                        sectionId: i.sectionId,
                                                        checkpointId: i.checkpointId,
                                                        checkpointName: i.checkpointName,
                                                        AssessmentStatus: i.AssessmentStatus,
                                                        CstatusUpdate: 2,
                                                        CheckpointSequence: i.CheckpointSequence,
                                                        checkpointComment: i.checkpointComment
                                                    }
                                                );
                                            );
                                        );
                                    );
                                    ,
                                        //Item assessment transaction data
                                    If(
                                        IsEmpty(GC_checkpointItemAssessment),
                                        ClearCollect(
                                            GC_checkpointItemAssessmentAdd,
                                            Filter(
                                                checkpointItemAssessment,
                                                bankUnitId.Id = ThisItem.bankUnitId.Id
                                            )
                                        );
                                        ClearCollect(
                                            GC_checkpointItemAssessment,
                                            AddColumns(
                                                GC_checkpointItemAssessmentAdd,
                                                "CIstatusUpdate",
                                                2
                                            )
                                        );,
                                        If(
                                            CountRows(
                                                Filter(
                                                    GC_checkpointItemAssessment,
                                                      bankUnitId.Id = ThisItem.bankUnitId.Id
                                                )
                                            )<1,
                                            ClearCollect(
                                                GC_checkpointItemAssessmentTemp,
                                                Filter(
                                                    checkpointItemAssessment,
                                                    bankUnitId.Id = ThisItem.bankUnitId.Id
                                                )
                                            );
                                            ForAll(
                                                GC_checkpointItemAssessmentTemp As i,
                                                Patch(
                                                    GC_checkpointItemAssessment,
                                                    Defaults(GC_checkpointItemAssessment),
                                                    {
                                                          'checkpointItemAssessment (quantum_checkpointitemassessmentid)':i.'checkpointItemAssessment (quantum_checkpointitemassessmentid)',
                                                        'checkpointItemAssessment (quantum_checkpointitemassessment)': i.'checkpointItemAssessment (quantum_checkpointitemassessment)',
                                                        checkpointAssessment_Id: i.checkpointAssessment_Id,
                                                        assignmentId: i.assignmentId,
                                                        bankUnitId: i.bankUnitId,
                                                        product_id: i.product_id,
                                                        section_Id: i.section_Id,
                                                        checkpointItem_annotation: i.checkpointItem_annotation,
                                                        checkpointItemId: i.checkpointItemId,
                                                        checkpointItemName: i.checkpointItemName,
                                                        assessmentStatus: i.assessmentStatus,
                                                        CIstatusUpdate: 2,
                                                        checkpointitemSequence: i.checkpointitemSequence,
                                                        checkpointItemComment: i.checkpointItemComment
                                                     
                                                       
                                                           }
                                                )
                                            )
                                        );
                                    );
                                    ,
                                   //checkpoint Action Items assessment transaction data
                                    If(
                                        IsEmpty(GC_checkpointItem_ActionItem),
                                        ClearCollect(
                                            GC_checkpointItem_ActionItemAdd,
                                            Filter(
                                                checkpointItem_ActionItem,
                                                bankUnitId.Id = ThisItem.bankUnitId.Id
                                            )
                                        );
                                        ClearCollect(
                                            GC_checkpointItem_ActionItem,
                                            AddColumns(
                                                GC_checkpointItem_ActionItemAdd,
                                                "CIAstatusUpdate",
                                                2
                                            )
                                        );,
                                        If(
                                            CountRows(
                                                Filter(
                                                    GC_checkpointItem_ActionItem,
                                                    bankUnitId.Id = ThisItem.bankUnitId.Id
                                                )
                                            )<1,
                                            ClearCollect(
                                                GC_checkpointItem_ActionItemTemp,
                                                Filter(
                                                    checkpointItem_ActionItem,
                                                    bankUnitId.Id = ThisItem.bankUnitId.Id
                                                )
                                            );
                                            ForAll(
                                                GC_checkpointItem_ActionItemTemp As i,
                                                Patch(
                                                    GC_checkpointItem_ActionItem,
                                                    Defaults(GC_checkpointItem_ActionItem),
                                                    {
                                                        checkpointItem_ActionItems: i.checkpointItem_ActionItems,
                                                        checkpointItemActionItemsId: i.checkpointItemActionItemsId,
                                                        ActionItem_Name: i.ActionItem_Name,
                                                        assignmentId: i.assignmentId,
                                                        bankId: i.bankId,
                                                        bankUnitId: i.bankUnitId,
                                                        section_id: i.section_id,
                                                        checkpoint_id: i.checkpoint_id,
                                                        checkpointItem_Id: i.checkpointItem_Id,
                                                        product_id: i.product_id,
                                                        priority: i.priority,
                                                        OwnerId: i.OwnerId,
                                                        TimeEstimate: i.TimeEstimate,
                                                        MaterialEstimate: i.MaterialEstimate,
                                                        CIAstatusUpdate: 2,
                                                        Action_status:i.Action_status
                                                    }
                                                );
                                            );
                                        );
                                    );
                                    ,
                                    //checkpoint Action Items assessment transaction data
                                    If(
                                        IsEmpty(GC_checkpointItem_Images),
                                        ClearCollect(
                                            GC_checkpointItem_ImagesAdd,
                                            Filter(
                                                checkpointItem_Images,
                                                bankUnitId.Id = ThisItem.bankUnitId.Id
                                            )
                                        );
                                        ClearCollect(
                                            GC_checkpointItem_Images,
                                            AddColumns(
                                                GC_checkpointItem_ImagesAdd,
                                                "CIIstatusUpdate",
                                                2
                                            )
                                        );,
                                        If(
                                            CountRows(
                                                Filter(
                                                    GC_checkpointItem_Images,
                                                    bankUnitId.Id = ThisItem.bankUnitId.Id
                                                )
                                            )<1,
                                            ClearCollect(
                                                GC_checkpointItem_ImagesTemp,
                                                Filter(
                                                    checkpointItem_Images,
                                                    bankUnitId.Id = ThisItem.bankUnitId.Id
                                                )
                                            );
                                            ForAll(
                                                GC_checkpointItem_ImagesTemp As i,
                                                Patch(
                                                    GC_checkpointItem_Images,
                                                    Defaults(GC_checkpointItem_Images),
                                                    {
                                                        checkpointItem_Images: i.checkpointItem_Images,
                                                        checkpointItemImagesId: i.checkpointItemImagesId,
                                                        assignmentId: i.assignmentId,
                                                        bankUnitId: i.bankUnitId,
                                                        section_id: i.section_id,
                                                        checkpoint_id: i.checkpoint_id,
                                                        checkpointItem_Id: i.checkpointItem_Id,
                                                        product_id: i.product_id,
                                                       // Image:Image14_2.Image,
                                                        Image:i.Image,
                                                        image_annotation: i.image_annotation,
                                                        CIIstatusUpdate: 2
                                                    }
                                                );
                                            );
                                        );
                                    );
                                );
                              );
                            If(
                                comp = true,
                                Navigate(ViewAssessmentScreen),
                                Set(
                                    varSafety,
                                    false
                                );
                                
                            //here set variable for selected product model.
                            Set(
                                    CId,
                                    ThisItem.productModel
                                );
                                
                            //set variable for selected bankunitId.
                            Set(
                                    varBankUnitId,
                                    ThisItem.bankUnitId.Id
                                );
                                
                                      
                            Navigate(SectionScreen);
                                
                            );
                        PressedColor: |
                            =Self.Color
                        PressedFill: =Self.Fill
                        Size: =AllScreensCSS.RfontsizeInput
                        Text: |-
                            =//"Start assessment"
                            If(
                                comp = true,
                                "View Assessment",
                                If(
                                    (LookUp(
                                        GC_unitAssessment,
                                        assignmentId.Id = varAssignmentId && bankUnitId.Id = ThisItem.bankUnitId.Id,
                                        Assessment_status
                                        ) = "Inprogress"
                                    ),
                                    "Resume Assessment",
                                    "Start Assessment"
                                )
                            )
                        Width: =ctnunitAssessmentBS.Width/4
                        X: =(Parent.Width-Self.Width)-40
                        Y: =30
                        ZIndex: =3

                    btnCommentBS As button:
                        DisplayMode: |-
                            =If(
                                CountRows(
                                    Filter(
                                        GcSectionAssessment,
                                        assignmentId.Id = varAssignmentId && bankUnitId.Id = ThisItem.bankUnitId.Id && sectionComment <> Blank()
                                    )
                                ) = 0 && CountRows(
                                    Filter(
                                        GcCheckpointAssessment,
                                        assignmentId.Id = varAssignmentId && bankUnitId.Id = ThisItem.bankUnitId.Id && checkpointComment <> Blank()
                                    )
                                ) = 0 && CountRows(
                                    Filter(
                                        GC_checkpointItemAssessment,
                                        assignmentId.Id = varAssignmentId && bankUnitId.Id = ThisItem.bankUnitId.Id && checkpointItemComment <> Blank()
                                    )
                                ) = 0,
                                DisplayMode.Disabled,
                                DisplayMode.Edit
                            )
                        Fill: =AllScreensCSS.RActiveColor
                        Font: =AllScreensCSS.RFont
                        Height: =50
                        HoverFill: =Self.Fill
                        OnSelect: |
                            =Set(varComment,true);
                            Set(varUnitId,ThisItem.bankUnitId);
                            Set(varSectionComment,true);
                            Set(varCheckpointComment,true);
                            Set(varCheckpoinitemComment,true);
                        Size: =AllScreensCSS.RfontsizeInput
                        Text: ="Comment"
                        Visible: |-
                            =
                            If(comp= true , false , true )
                        Width: =120
                        X: =(Parent.Width-Self.Width-btnStartAssessmentBS.Width)-60
                        Y: =30
                        ZIndex: =4

                    imgUnitsyncstatusBS As image:
                        Height: =30
                        Image: |-
                            =//To display sync status - if ustatusUpdate is 2 then display green tik otherwise if ustatusUpdate is 1 then  display gray tik
                            If(
                                CountRows(
                                    Filter(
                                        GC_unitAssessment,
                                        assignmentId.Id = varAssignmentId && bankUnitId.Id = ThisItem.bankUnitId.Id && UstatusUpdate = 2
                                    )
                                ) > 0,
                                uploaded,
                                CountRows(
                                    Filter(
                                        GC_unitAssessment,
                                        assignmentId.Id = varAssignmentId && bankUnitId.Id = ThisItem.bankUnitId.Id && UstatusUpdate = 1
                                    )
                                ) > 0 
                                ,
                                'not-uploaded'
                            )
                        OnSelect: =Select(Parent)
                        Visible: |-
                            =//To display sync status - if ustatusUpdate is 2 or 1 then  display sync status
                            If(
                                CountRows(
                                    Filter(
                                        GC_unitAssessment,
                                        (assignmentId.Id = varAssignmentId && bankUnitId.Id = ThisItem.bankUnitId.Id && Assessment_status = "Inprogress" && UstatusUpdate = 2)  || 
                                        (assignmentId.Id = varAssignmentId && bankUnitId.Id = ThisItem.bankUnitId.Id && Assessment_status = "Inprogress" && UstatusUpdate = 1) 
                                       
                                    )
                                ) > 0,
                                true,
                                false
                            )
                        Width: =30
                        X: =(Parent.Width-Self.Width-btnStartAssessmentBS.Width-btnCommentBS.Width-imgUnitSyncBS.Width)-100
                        Y: =38
                        ZIndex: =5

                    imgUnitSyncBS As image:
                        Height: =45
                        HoverBorderColor: =
                        HoverFill: =
                        Image: |-
                            =If(
                                Connection.Connected = true,
                                SYNC,
                                'SYNC Copy'
                            )
                        ImagePosition: =ImagePosition.Fill
                        OnSelect: =true
                        RadiusBottomLeft: =90
                        RadiusBottomRight: =90
                        RadiusTopLeft: =90
                        RadiusTopRight: =90
                        Visible: =If(comp= true , false , true )
                        Width: =45
                        X: =(Parent.Width-Self.Width-btnStartAssessmentBS.Width-btnCommentBS.Width)-80
                        Y: =30
                        ZIndex: =6

                    btnUnitSyncBS As button:
                        BorderThickness: =0
                        DisabledColor: =AllScreensCSS.RActiveColor
                        DisabledFill: =AllScreensCSS.RActiveColor
                        Fill: =If(Connection.Connected, RGBA(0, 0, 0, 0),RGBA(204, 204, 204, 0.40))
                        Height: =45
                        HoverColor: =RGBA(0, 0, 0, 0)
                        HoverFill: =
                        OnSelect: |
                            =//if network available then patch 1 status data to dataverse
                            
                            If(
                                Connection.Connected,
                                If(
                                    CountRows(
                                        Filter(
                                            GC_unitAssessment,
                                             assignmentId.Id = varAssignmentId && 
                                             bankUnitId.Id = ThisItem.bankUnitId.Id &&
                                             UstatusUpdate = 1
                                        )
                                    ) > 0,
                                    Set(
                                        VarPopupSyncText,
                                        "Syncing Assessment findings and getting reviewer's comments. It may take sometime."
                                    );
                            
                                    Set(popupSyncSuccess,true);
                                    //update dataverse table instead using patch
                                    UpdateIf(
                                        assignments,
                                        Id = varAssignmentId && isCompleted = "Upcomming",
                                        {isCompleted: "Inprogress"}
                                    );
                                    UpdateIf(
                                        gcProjectAssignment,
                                        Id = varAssignmentId,
                                        {AstatusUpdate: 2}
                                    );
                                    SaveData(
                                        gcProjectAssignment,
                                        "localprojectassignment"
                                    );
                            
                                //update dataverse table instead using patch
                                    UpdateIf(
                                        bankAssessment,
                                        assignmentId.Id = varAssignmentId && 
                                        bankId.Id = VarBankId && 
                                        Assessment_Status = "Upcomming",
                                        {Assessment_Status: "Inprogress"}
                                    );
                                    UpdateIf(
                                        GC_bankAssessment,
                                        assignmentId.Id = varAssignmentId,
                                          {BstatusUpdate: 2}
                                    );
                                
                                  //saving to local cache
                                    SaveData(
                                        GC_bankAssessment,
                                        "localbankassessment"
                                    );
                            
                                    //update dataverse table instead using patch
                                    UpdateIf(
                                        unitAssessment,
                                        assignmentId.Id = varAssignmentId &&
                                        bankUnitId.Id = varBankUnitId && 
                                        Assessment_status = "Upcomming",
                            
                                        {Assessment_status: "Inprogress"}
                                    );
                                    UpdateIf(
                                        GC_unitAssessment,
                               
                                        assignmentId.Id = varAssignmentId && bankUnitId.Id = ThisItem.bankUnitId.Id  ,
                                        {UstatusUpdate: 2}
                                    );
                                    //saving to local cache
                                    SaveData(
                                        GC_unitAssessment,
                                        "localunitassessment"
                                    );
                                    ,
                                    CountRows(
                                        Filter(
                                            GC_unitAssessment,
                                            (assignmentId.Id = varAssignmentId && bankUnitId.Id = ThisItem.bankUnitId.Id && UstatusUpdate = 2)
                                        )
                                    ) > 0,
                                    Set(
                                        VarPopupSyncText,
                                        "No new assessment records found for submission. Getting reviewer’s comments for submitted Assessment findings."
                                    );
                                 Set(popupSyncSuccess,true);
                                    
                                );
                                
                                //to delete deleted actions from dataverse
                            ForAll(
                                    gcActionItemDelete As i,
                                    RemoveIf(
                                        checkpointItem_ActionItem,
                                        checkpointItemActionItemsId = i.id
                                    )
                                );
                                Clear(gcActionItemDelete);
                                SaveData(
                                    gcActionItemDelete,
                                    "localgcActionItemDelete"
                                );
                                //to delete deleted images from dataverse
                            ForAll(
                                    gcImageDelete As i,
                                    RemoveIf(
                                        checkpointItem_Images,
                                        checkpointItemImagesId = i.id
                                    )
                                );
                                Clear(gcImageDelete);
                                SaveData(
                                    gcImageDelete,
                                    "localgcImageDelete"
                                );
                            
                              
                            // inside section assessment collection => rows contain status 1 => patch that rows to dataverse
                            Patch(
                                    sectionAssessment,
                                    ShowColumns(
                                        DropColumns(
                                            Filter(
                                                GcSectionAssessment,
                                                bankUnitId.Id = ThisItem.bankUnitId.Id && SstatusUpdate = 1 && AssessmentStatus = "Inprogress"
                                            ),
                                            "SstatusUpdate"
                                        ),
                                        "quantum_sectionassessmentid",
                                        "shlaf_assignmentId",
                                        "shlaf_bankUnitId",
                                        "shlaf_product_id",
                                        "quantum_sectionassessment",
                                        "shlaf_sectionId",
                                        "quantum_sectionname",
                                        "shlaf_sectioncomment",
                                        "quantum_assessmentstatus",
                                        "cr28a_sectionsequence"
                                    )
                                );
                                ClearCollect(
                                    TempSectionAssessment,
                                    Filter(
                                        sectionAssessment,
                                        assignmentId.assessorId = varLoggedAssessor && assignmentId.Id = varAssignmentId && bankUnitId.Id = ThisItem.bankUnitId.Id
                                    )
                                );
                                ForAll(
                                    TempSectionAssessment As i,
                                    UpdateIf(
                                        GcSectionAssessment,
                                        'sectionAssessment (quantum_sectionassessment)' = i.'sectionAssessment (quantum_sectionassessment)'//&& SstatusUpdate = 1
                            ,
                                        {
                                            'sectionAssessment (quantum_sectionassessmentid)': i.'sectionAssessment (quantum_sectionassessmentid)',
                                            sectionComment: i.sectionComment,
                                            AssessmentStatus: i.AssessmentStatus,
                                            SstatusUpdate: 2
                                        }
                                    )
                                );
                                //saving data to local cache
                            SaveData(
                                    GcSectionAssessment,
                                    "localsectionassessment"
                                );
                                //updating sectionid lookup for checkpoint assessment collection to get updated unique key from dataverse using temporary collection
                            ForAll(
                                    TempSectionAssessment As i,
                                    UpdateIf(
                                        GcCheckpointAssessment,
                                        sectionId.'sectionAssessment (quantum_sectionassessment)' = i.'sectionAssessment (quantum_sectionassessment)',
                                        {
                                            sectionId: LookUp(
                                                TempSectionAssessment,
                                                'sectionAssessment (quantum_sectionassessment)' = i.'sectionAssessment (quantum_sectionassessment)'
                                            )
                                        }
                                    );
                                );
                                
                            // inside checkpoint assessment collection => rows contain status 1 => patch that rows to dataverse
                            Patch(
                                    checkpointAssessment,
                                    ShowColumns(
                                        DropColumns(
                                            Filter(
                                                GcCheckpointAssessment,
                                                bankUnitId.Id = ThisItem.bankUnitId.Id && CstatusUpdate = 1 && AssessmentStatus = "Inprogress"
                                            ),
                                            "CstatusUpdate"
                                        ),
                                        "quantum_checkpointassessmentid",
                                        "shlaf_assignmentId",
                                        "shlaf_bankUnitId",
                                        "shlaf_product_id",
                                        "quantum_sectionId",
                                        "quantum_checkpointassessment",
                                        "shlaf_checkpointId",
                                        "quantum_checkpointname",
                                        "quantum_checkpoint_annotation",
                                        "shlaf_checkpointcomment",
                                        "quantum_assessmentstatus",
                                        "cr28a_checkpointsequence"
                                    )
                                );
                                ClearCollect(
                                    TempCheckpointAssessment,
                                    Filter(
                                        checkpointAssessment,
                                        assignmentId.assessorId = varLoggedAssessor && assignmentId.Id = varAssignmentId && bankUnitId.Id = ThisItem.bankUnitId.Id
                                    )
                                );
                                ForAll(
                                    TempCheckpointAssessment As i,
                                    UpdateIf(
                                        GcCheckpointAssessment,
                                        checkpointAssessment_id = i.checkpointAssessment_id//&& CstatusUpdate = 1
                            ,
                                        {
                                            checkpointAssessment: i.checkpointAssessment,
                                            AssessmentStatus: i.AssessmentStatus,
                                            checkpointComment: i.checkpointComment,
                                            CstatusUpdate: 2
                                        }
                                    )
                                );
                              //saving data to local cache
                            SaveData(
                                    GcCheckpointAssessment,
                                    "localcheckpointassessment"
                                );
                                
                            //updating sectionId & checkpointAssessmentId lookup for checkpoint item assessment collection to get updated unique key from dataverse using temporary collection
                            ForAll(
                                    TempSectionAssessment As i,
                                    ForAll(
                                        TempCheckpointAssessment As a,
                                        UpdateIf(
                                            GC_checkpointItemAssessment,
                                            section_Id.'sectionAssessment (quantum_sectionassessment)' = i.'sectionAssessment (quantum_sectionassessment)' && checkpointAssessment_Id.checkpointAssessment_id = a.checkpointAssessment_id,
                                            {
                                                section_Id: LookUp(
                                                    TempSectionAssessment,
                                                    'sectionAssessment (quantum_sectionassessment)' = i.'sectionAssessment (quantum_sectionassessment)'
                                                ),
                                                checkpointAssessment_Id: LookUp(
                                                    TempCheckpointAssessment,
                                                    checkpointAssessment_id = a.checkpointAssessment_id
                                                )
                                            }
                                        );
                                    );
                                );
                                // inside checkpoint item assessment collection => rows contain status 1 => patch that rows to dataverse
                            Patch(
                                    checkpointItemAssessment,
                                    ShowColumns(
                                        DropColumns(
                                            Filter(
                                                GC_checkpointItemAssessment,
                                                bankUnitId.Id = ThisItem.bankUnitId.Id && CIstatusUpdate = 1
                                            ),
                                            "CIstatusUpdate"
                                        ),
                                        "quantum_checkpointitemassessmentid",
                                        "shlaf_assignmentId",
                                        "shlaf_bankUnitId",
                                        "shlaf_product_id",
                                        "shlaf_section_Id",
                                        "quantum_checkpointAssessment_Id",
                                        "quantum_checkpointitemassessment",
                                        "shlaf_checkpointItemId",
                                        "quantum_checkpointitemname",
                                        "quantum_checkpointitem_annotation",
                                        "shlaf_checkpointitemcomment",
                                        "quantum_assessmentstatus",
                                        "cr28a_checkpointitemsequence"
                                    )
                                );
                                ClearCollect(
                                    TempCheckpointItemAssessment,
                                    Filter(
                                        checkpointItemAssessment,
                                        assignmentId.assessorId = varLoggedAssessor && assignmentId.Id = varAssignmentId && bankUnitId.Id = ThisItem.bankUnitId.Id
                                    )
                                );
                                ForAll(
                                    TempCheckpointItemAssessment As i,
                                    UpdateIf(
                                        GC_checkpointItemAssessment,
                                        'checkpointItemAssessment (quantum_checkpointitemassessment)' = i.'checkpointItemAssessment (quantum_checkpointitemassessment)'//&& CIstatusUpdate = 1
                            ,
                                        {
                                            'checkpointItemAssessment (quantum_checkpointitemassessmentid)': i.'checkpointItemAssessment (quantum_checkpointitemassessmentid)',
                                            assessmentStatus: i.assessmentStatus,
                                            checkpointItemComment: i.checkpointItemComment,
                                            CIstatusUpdate: 2
                                        }
                                    )
                                );
                                //saving data to local cache
                            SaveData(
                                    GC_checkpointItemAssessment,
                                    "localcheckpointitemassessment"
                                );
                                 //updating sectionId  ,checkpointId & checkpointItemId lookup for checkpoint Action item collection to get updated unique key from dataverse  using temporary collection      
                            ForAll(
                                    TempSectionAssessment As i,
                                    ForAll(
                                        TempCheckpointAssessment As j,
                                        ForAll(
                                            TempCheckpointItemAssessment As k,
                                            UpdateIf(
                                                GC_checkpointItem_ActionItem,
                                                section_id.'sectionAssessment (quantum_sectionassessment)' = i.'sectionAssessment (quantum_sectionassessment)' && checkpoint_id.checkpointAssessment_id = j.checkpointAssessment_id && checkpointItem_Id.'checkpointItemAssessment (quantum_checkpointitemassessment)' = k.'checkpointItemAssessment (quantum_checkpointitemassessment)',
                                                {
                                                    section_id: LookUp(
                                                        TempSectionAssessment,
                                                        'sectionAssessment (quantum_sectionassessment)' = i.'sectionAssessment (quantum_sectionassessment)'
                                                    ),
                                                    checkpoint_id: LookUp(
                                                        TempCheckpointAssessment,
                                                        checkpointAssessment_id = j.checkpointAssessment_id
                                                    ),
                                                    checkpointItem_Id: LookUp(
                                                        TempCheckpointItemAssessment,
                                                        'checkpointItemAssessment (quantum_checkpointitemassessment)' = k.'checkpointItemAssessment (quantum_checkpointitemassessment)'
                                                    )
                                                }
                                            );
                                        );
                                    );
                                );
                                
                            // inside checkpoint Action item collection => rows contain status 1 => patch that rows to dataverse
                            Patch(
                                    checkpointItem_ActionItem,
                                    ShowColumns(
                                        DropColumns(
                                            Filter(
                                                GC_checkpointItem_ActionItem,
                                                bankUnitId.Id = ThisItem.bankUnitId.Id && CIAstatusUpdate = 1
                                            ),
                                            "CIAstatusUpdate"
                                        ),
                                        "quantum_checkpointitem_actionitemsid",
                                        "shlaf_assignmentId",
                                        "shlaf_bankId",
                                        "shlaf_bankUnitId",
                                        "shlaf_product_id",
                                        "shlaf_section_id",
                                        "shlaf_checkpoint_id",
                                        "quantum_checkpointItem_Id",
                                        "quantum_checkpointitemactionitemsid",
                                        "shlaf_actionitem_name",
                                        "quantum_priority",
                                        "quantum_materialestimate",
                                        "quantum_timeestimate",
                                        "quantum_duedate",
                                        "quantum_ownerid",
                                        "cr28a_action_status"
                                    )
                                );
                                
                            //get specific unit wise checkpoint Action item data from dataverse to collection 
                            ClearCollect(
                                    TempcheckpointItem_ActionItem,
                                    Filter(
                                        checkpointItem_ActionItem,
                                        assignmentId.assessorId = varLoggedAssessor && assignmentId.Id = varAssignmentId && bankUnitId.Id = ThisItem.bankUnitId.Id
                                    )
                                );
                                ForAll(
                                    TempcheckpointItem_ActionItem As i,
                                    UpdateIf(
                                        GC_checkpointItem_ActionItem,
                                        checkpointItemActionItemsId = i.checkpointItemActionItemsId && CIAstatusUpdate = 1,
                                        {
                                            checkpointItem_ActionItems: i.checkpointItem_ActionItems,
                                            Action_status: i.Action_status,
                                            CIAstatusUpdate: 2
                                        }
                                    )
                                );
                                    //saving data to local cache
                            SaveData(
                                    GC_checkpointItem_ActionItem,
                                    "localcheckpointitemactionitem"
                                );
                                //updating sectionId  ,checkpointId & checkpointItemId lookup for checkpoint images collection to get updated unique key from dataverse using temporary collection
                            ForAll(
                                    TempSectionAssessment As i,
                                    ForAll(
                                        TempCheckpointAssessment As j,
                                        ForAll(
                                            TempCheckpointItemAssessment As k,
                                            UpdateIf(
                                                GC_checkpointItem_Images,
                                                section_id.'sectionAssessment (quantum_sectionassessment)' = i.'sectionAssessment (quantum_sectionassessment)' && checkpoint_id.checkpointAssessment_id = j.checkpointAssessment_id && checkpointItem_Id.'checkpointItemAssessment (quantum_checkpointitemassessment)' = k.'checkpointItemAssessment (quantum_checkpointitemassessment)',
                                                {
                                                    section_id: LookUp(
                                                        TempSectionAssessment,
                                                        'sectionAssessment (quantum_sectionassessment)' = i.'sectionAssessment (quantum_sectionassessment)'
                                                    ),
                                                    checkpoint_id: LookUp(
                                                        TempCheckpointAssessment,
                                                        checkpointAssessment_id = j.checkpointAssessment_id
                                                    ),
                                                    checkpointItem_Id: LookUp(
                                                        TempCheckpointItemAssessment,
                                                        'checkpointItemAssessment (quantum_checkpointitemassessment)' = k.'checkpointItemAssessment (quantum_checkpointitemassessment)'
                                                    )
                                                }
                                            );
                                        );
                                    );
                                );
                                    // inside checkpoint images collection => rows contain status 1 => patch that rows to dataverse
                            Patch(
                                    checkpointItem_Images,
                                    ShowColumns(
                                        DropColumns(
                                            Filter(
                                                GC_checkpointItem_Images,
                                                bankUnitId.Id = ThisItem.bankUnitId.Id && CIIstatusUpdate = 1
                                            ),
                                            "CIIstatusUpdate"
                                        ),
                                        "quantum_checkpointitem_imagesid",
                                        "shlaf_assignmentId",
                                        "shlaf_bankUnitId",
                                        "shlaf_product_id",
                                        "shlaf_section_id",
                                        "shlaf_checkpoint_id",
                                        "quantum_checkpointItem_Id",
                                        "quantum_checkpointitemimagesid",
                                        "shlaf_image_annotation",
                                        "quantum_image"
                                    )
                                );
                                
                            //get specific unit wise checkpoint images item data from dataverse to collection 
                            ClearCollect(
                                    TempCheckpointItem_Images,
                                    Filter(
                                        checkpointItem_Images,
                                        assignmentId.assessorId = varLoggedAssessor && assignmentId.Id = varAssignmentId && bankUnitId.Id = varBankUnitId
                                    )
                                );
                                ForAll(
                                    TempCheckpointItem_Images As i,
                                    UpdateIf(
                                        GC_checkpointItem_Images,
                                        checkpointItemImagesId = i.checkpointItemImagesId && CIIstatusUpdate = 1,
                                        {
                                            checkpointItem_Images: i.checkpointItem_Images,
                                            CIIstatusUpdate: 2
                                        }
                                    )
                                );
                                    //saving data to local cache
                            SaveData(
                                    GC_checkpointItem_Images,
                                    "localcheckpointitemimage"
                                );
                                 Set(popupSyncSuccess,false);
                                ,
                                Set(
                                    popupSyncSuccess,
                                    true
                                );
                                Set(
                                    VarPopupSyncText,
                                    " Network is not available , please try after sometime"
                                );
                                 Set(popupSyncSuccess,false);
                            );
                        PressedFill: =AllScreensCSS.RActiveColor
                        RadiusBottomLeft: =95
                        RadiusBottomRight: =95
                        RadiusTopLeft: =95
                        RadiusTopRight: =95
                        Text: =""
                        Width: =45
                        X: =(Parent.Width-Self.Width-btnStartAssessmentBS.Width-btnCommentBS.Width)-80
                        Y: =30
                        ZIndex: =7

        ctnHeaderBS As groupContainer.manualLayoutContainer:
            Fill: =Header.HeaderFill
            Height: =80
            PaddingRight: =10
            Width: =Parent.Width
            ZIndex: =2

            GroupHeaderBS As group:
                Height: =5
                Width: =5
                X: =40
                Y: =40
                ZIndex: =10

                imgLogo_1 As image:
                    DisplayMode: =DisplayMode.View
                    Fill: =RGBA(255, 255, 255, 1)
                    Height: =80
                    Image: ='schindler-logo'
                    PaddingBottom: =5
                    PaddingLeft: =2
                    PaddingRight: =1
                    PaddingTop: =5
                    Width: =ctnHeaderBS.Width/12
                    ZIndex: =1

                lblAssessmentBS_2 As label:
                    Align: =Align.Center
                    Color: =Header.HeaderColor
                    Font: =Header.HeaderFont
                    FontWeight: =FontWeight.Bold
                    Height: =80
                    Size: =Header.HeaderFontSize
                    Text: |
                        =lblProjectName.Text
                    Width: =ctnHeaderBS.Width/1.65
                    X: =imgLogo_1.Width
                    ZIndex: =2

                imgUserHeaderBS_2 As image:
                    Height: =50
                    Image: =userImg
                    ImagePosition: =ImagePosition.Fill
                    RadiusBottomLeft: =ctnHeaderBS.Height/0.10
                    RadiusBottomRight: =ctnHeaderBS.Height/0.10
                    RadiusTopLeft: =ctnHeaderBS.Height/0.10
                    RadiusTopRight: =ctnHeaderBS.Height/0.10
                    Width: =50
                    X: =lblAssessmentBS_2.Width+lblAssessmentBS_2.X
                    Y: =(ctnHeaderBS.Height-Self.Height)/2
                    ZIndex: =4

                lblUsernameHeaderBS_2 As label:
                    Color: =RGBA(255, 255, 255, 1)
                    Font: =Header.HeaderFont
                    FontWeight: =FontWeight.Bold
                    Height: =80
                    PaddingLeft: =20
                    Size: =Header.HeaderUserFontSize-2
                    Text: =username
                    Width: =ctnHeaderBS.Width/6
                    X: =imgUserHeaderBS_2.Width+imgUserHeaderBS_2.X
                    ZIndex: =5

                NetworkIconBS As Component2:
                    X: =lblUsernameHeaderBS_2.Width+lblUsernameHeaderBS_2.X
                    Y: =(ctnHeaderDS.Height-Self.Height)/2
                    ZIndex: =9

        CommentPopupBS As group:
            Height: =5
            Width: =5
            X: =40
            Y: =40
            ZIndex: =17

            Rectangle1_3 As rectangle:
                Fill: =RGBA(0, 0, 0, 0.29)
                Height: =Parent.Height
                Visible: |
                    =varComment
                Width: =Parent.Width
                ZIndex: =4

            Rectangle5_2 As rectangle:
                Fill: =RGBA(255, 255, 255, 1)
                Height: =405
                Visible: |
                    =varComment
                Width: =700
                X: =(Parent.Width -Self.Width)/2
                Y: =(Parent.Height - Self.Height)/2
                ZIndex: =5

            Container38_2 As groupContainer.horizontalAutoLayoutContainer:
                Height: =40
                LayoutMode: =LayoutMode.Auto
                Visible: |
                    =varComment
                Width: =Rectangle5_2.Width
                X: =Rectangle5_2.X
                Y: =Rectangle5_2.Y+10
                ZIndex: =6

                Label41_2 As label:
                    Font: =AllScreensCSS.RFont
                    FontWeight: =FontWeight.Semibold
                    PaddingLeft: =40
                    Text: =" Reviewer Comments"
                    Width: =Parent.Width-70
                    ZIndex: =1

                Icon2_4 As icon.Cancel:
                    Color: =RGBA(153, 153, 153, 1)
                    Height: =35
                    Icon: =Icon.Cancel
                    OnSelect: =Set(varComment,false)
                    Width: =30
                    ZIndex: =2

            Rectangle6_2 As rectangle:
                BorderColor: =RGBA(179, 179, 179, 1)
                BorderThickness: =2
                Fill: =RGBA(255, 255, 255, 1)
                Height: =250
                Visible: |
                    =varComment
                Width: =656
                X: =Rectangle5_2.X+20
                Y: =lblPopupUnitBS.Height+lblPopupUnitBS.Y
                ZIndex: =7

            iconPopupLineBS As icon.Add:
                Color: =RGBA(179, 179, 179, 1)
                Fill: =RGBA(179, 179, 179, 1)
                Height: =2
                Icon: =Icon.HorizontalLine
                Visible: |
                    =varComment
                Width: =Rectangle6_2.Width
                X: =Rectangle6_2.X
                Y: =Rectangle6_2.Y +Rectangle6_2.Height+10
                ZIndex: =8

            btnPopupcloseBS As button:
                BorderThickness: =0
                Fill: =AllScreensCSS.RActiveColor
                FocusedBorderThickness: =
                Font: =AllScreensCSS.RFont
                HoverFill: =
                OnSelect: |
                    =Concurrent(
                        Set(
                            varComment,
                            false
                        ),
                        Set(
                            varSectionComment,
                            false
                        ),
                        Set(
                            varCheckpointComment,
                            false
                        ),
                        Set(
                            varItemComment,
                            false
                        )
                    );
                    Navigate(BankScreen);
                PressedColor: =Self.Color
                PressedFill: =Self.Fill
                Size: =AllScreensCSS.RLabelFontSize
                Text: ="Close"
                Visible: |
                    =varComment
                X: =(Parent.Width-Self.Width)/2
                Y: =iconPopupLineBS.Y+5
                ZIndex: =9

            txtPopupNoCommentsBS As text:
                BorderThickness: =0
                Default: ="No Comments"
                DisplayMode: =DisplayMode.View
                FocusedBorderColor: =RGBA(179, 179, 179, 1)
                Font: =AllScreensCSS.RFont
                Height: =Rectangle6_2.Height
                HoverBorderColor: =RGBA(179, 179, 179, 1)
                HoverFill: =RGBA(0, 0, 0, 0)
                Mode: =TextMode.MultiLine
                PressedBorderColor: =RGBA(179, 179, 179, 1)
                Size: =AllScreensCSS.RfontsizeInput
                Visible: =If(varComment = true && IsBlank(GlrycmntsBS),true,false)
                Width: =Rectangle6_2.Width
                X: =Rectangle6_2.X
                Y: =Rectangle6_2.Y
                ZIndex: =10

            lblPopupUnitBS As label:
                Font: =AllScreensCSS.RFont
                FontWeight: =FontWeight.Semibold
                PaddingLeft: =42
                Text: ="Unit " & varUnitId.unitNumber
                Visible: =varComment
                Width: =Parent.Width/4
                X: =Rectangle5_2.X
                Y: =Container38_2.Y+Container38_2.Height
                ZIndex: =12

            lblPopupReviewerBS As label:
                Font: =AllScreensCSS.RFont
                FontWeight: =FontWeight.Semibold
                Text: |-
                    ="Reviewer: " & glryProject.Selected.reviewerName
                Visible: =varComment
                Width: =300
                X: =lblPopupUnitBS.Width+lblPopupUnitBS.X
                Y: =Container38_2.Y+Container38_2.Height
                ZIndex: =13

            "GlrycmntsBS As gallery.'BrowseLayout_Vertical_TwoTextOneImageVariant_ver4.0'":
                Height: =Rectangle6_2.Height
                Items: |-
                    =//Display unit wise comments parent gallery
                    If(
                        varComment = true,
                        Filter(
                            GC_unitAssessment,
                            assignmentId.Id = varAssignmentId && bankUnitId.Id = varUnitId.Id
                        )
                    )
                Layout: =Layout.Vertical
                TemplatePadding: =0
                TemplateSize: =glrySectioncomment.Height+glryCheckpointcomment.Height+glryCheckpointItemComment.Height
                Visible: =varComment
                Width: =txtPopupNoCommentsBS.Width
                X: =(Parent.Width -Self.Width)/2
                Y: =Rectangle6_2.Y
                ZIndex: =16

                "glryCheckpointItemComment As gallery.'BrowseLayout_Vertical_TwoTextOneImageVariant_ver4.0'":
                    Height: =CountRows(glryCheckpointItemComment.AllItems)*(glryCheckpointItemComment.TemplateHeight+glryCheckpointItemComment.TemplatePadding)
                    Items: |-
                        =//Display checkpoint item wise comment
                        Filter(
                            GC_checkpointItemAssessment,
                            assignmentId.Id = varAssignmentId && 
                            bankUnitId.Id = ThisItem.bankUnitId.Id && 
                            checkpointItemComment <> Blank()
                        )
                    Layout: =Layout.Vertical
                    ShowScrollbar: =false
                    TemplatePadding: =1
                    TemplateSize: =100
                    Width: =txtPopupNoCommentsBS.Width
                    X: =10
                    Y: =glryCheckpointcomment.Height+glryCheckpointcomment.Y
                    ZIndex: =6

                    lblcheckpointItemcomment As label:
                        OnSelect: =Select(Parent)
                        PaddingBottom: =0
                        PaddingLeft: =0
                        PaddingRight: =0
                        PaddingTop: =0
                        Text: =ThisItem.checkpointItemName
                        VerticalAlign: =VerticalAlign.Top
                        Visible: =false
                        Width: =Parent.TemplateWidth - 104
                        X: =25
                        Y: =20
                        ZIndex: =2

                    lblcheckpointItemname As label:
                        AutoHeight: =true
                        Font: =AllScreensCSS.RFont
                        OnSelect: =Select(Parent)
                        PaddingBottom: =0
                        PaddingLeft: =0
                        PaddingRight: =0
                        PaddingTop: =0
                        Size: =AllScreensCSS.RLabelFontSize
                        Text: =ThisItem.checkpointItemComment
                        VerticalAlign: =VerticalAlign.Top
                        Width: =lblcheckpointItemcomment.Width
                        X: =lblcheckpointItemcomment.X
                        Y: =10
                        ZIndex: =3

                    iconLineCheckpointItemcomment As rectangle:
                        Height: =1
                        OnSelect: =Select(Parent)
                        Visible: =false
                        Width: =Parent.TemplateWidth
                        Y: =Parent.TemplateHeight - 1
                        ZIndex: =5

                "glryCheckpointcomment As gallery.'BrowseLayout_Vertical_TwoTextOneImageVariant_ver4.0'":
                    Height: =CountRows(glryCheckpointcomment.AllItems)*(glryCheckpointcomment.TemplateHeight+glryCheckpointcomment.TemplatePadding)
                    Items: |-
                        =//Display checkpoint wise comment
                        Filter(
                            GcCheckpointAssessment,
                            assignmentId.Id = varAssignmentId && 
                            bankUnitId.Id = ThisItem.bankUnitId.Id && 
                            checkpointComment <> Blank()
                        )
                    Layout: =Layout.Vertical
                    ShowScrollbar: =false
                    TemplatePadding: =1
                    TemplateSize: =80
                    Width: =txtPopupNoCommentsBS.Width
                    X: =10
                    Y: =glrySectioncomment.Height+glrySectioncomment.Y
                    ZIndex: =7

                    lblcheckpointname As label:
                        Height: =30
                        OnSelect: =Select(Parent)
                        PaddingBottom: =0
                        PaddingLeft: =0
                        PaddingRight: =0
                        PaddingTop: =0
                        Text: =ThisItem.checkpointName
                        VerticalAlign: =VerticalAlign.Top
                        Visible: =false
                        Width: =Parent.TemplateWidth - 104
                        X: =25
                        Y: =10
                        ZIndex: =2

                    lblcheckpointcomment As label:
                        AutoHeight: =true
                        Font: =AllScreensCSS.RFont
                        Height: =30
                        OnSelect: =Select(Parent)
                        PaddingBottom: =0
                        PaddingLeft: =0
                        PaddingRight: =0
                        PaddingTop: =0
                        Size: =AllScreensCSS.RLabelFontSize
                        Text: =ThisItem.checkpointComment
                        VerticalAlign: =VerticalAlign.Top
                        Width: =lblcheckpointname.Width
                        X: =lblcheckpointname.X
                        Y: =10
                        ZIndex: =3

                    iconLineCheckpointcomment As rectangle:
                        Height: =1
                        OnSelect: =Select(Parent)
                        Visible: =false
                        Width: =Parent.TemplateWidth
                        Y: =Parent.TemplateHeight - 1
                        ZIndex: =5

                "glrySectioncomment As gallery.'BrowseLayout_Vertical_TwoTextOneImageVariant_ver4.0'":
                    Height: =CountRows(glrySectioncomment.AllItems)*(glrySectioncomment.TemplateHeight+glrySectioncomment.TemplatePadding)
                    Items: |-
                        =//display section wise comments
                        Filter(
                            GcSectionAssessment,
                            assignmentId.Id = varAssignmentId && 
                            bankUnitId.Id = ThisItem.bankUnitId.Id && 
                            sectionComment <> Blank()
                        )
                    Layout: =Layout.Vertical
                    ShowScrollbar: =false
                    TemplatePadding: =1
                    TemplateSize: =80
                    Width: =txtPopupNoCommentsBS.Width
                    X: =10
                    ZIndex: =8

                    lblsectionname As label:
                        AutoHeight: =true
                        Font: =AllScreensCSS.RFont
                        Height: =30
                        OnSelect: =Select(Parent)
                        PaddingBottom: =0
                        PaddingLeft: =0
                        PaddingRight: =0
                        PaddingTop: =0
                        Size: =AllScreensCSS.RLabelFontSize
                        Text: =ThisItem.sectionName
                        VerticalAlign: =VerticalAlign.Top
                        Visible: =false
                        Width: =Parent.TemplateWidth - 104
                        X: =25
                        ZIndex: =2

                    lblsectioncomment As label:
                        AutoHeight: =true
                        Font: =AllScreensCSS.RFont
                        Height: =30
                        OnSelect: =Select(Parent)
                        PaddingBottom: =0
                        PaddingLeft: =0
                        PaddingRight: =0
                        PaddingTop: =0
                        Size: =AllScreensCSS.RLabelFontSize
                        Text: =ThisItem.sectionComment
                        VerticalAlign: =VerticalAlign.Top
                        Width: =lblsectionname.Width
                        X: =lblsectionname.X
                        Y: =10
                        ZIndex: =3

                    iconLineSectioncomment As rectangle:
                        Height: =1
                        OnSelect: =Select(Parent)
                        Visible: =false
                        Width: =Parent.TemplateWidth
                        Y: =Parent.TemplateHeight - 1
                        ZIndex: =5

    grPatchSuccessBS As group:
        Height: =5
        Width: =5
        X: =40
        Y: =40
        ZIndex: =9

        iconOuterRectangleBS As rectangle:
            Fill: =RGBA(0, 0, 0, 0.29)
            Height: =Parent.Height
            Visible: =popupSyncSuccess =true
            Width: =Parent.Width
            ZIndex: =3

        iconInnerRectangleBS As rectangle:
            Fill: =RGBA(255, 255, 255, 1)
            Height: =270
            Visible: =popupSyncSuccess =true
            Width: =400
            X: =(Parent.Width-Self.Width)/2
            Y: =Parent.Height/3
            ZIndex: =4

        imgloaderBS As image:
            Height: =52
            Image: ='ajax-loader 2'
            Visible: =popupSyncSuccess =true
            Width: =52
            X: =(Parent.Width-Self.Width)/2
            Y: =iconInnerRectangleBS.Y+20
            ZIndex: =5

        lblSyncSuccessPatchBS As label:
            Align: =Align.Center
            Color: =RGBA(14, 161, 26, 1)
            Font: =AllScreensCSS.RFont
            FontWeight: =FontWeight.Bold
            Height: =0
            PaddingBottom: =0
            Size: =18
            Text: ="Success"
            Visible: =popupSyncSuccess =true
            Width: =350
            X: =(Parent.Width-Self.Width)/2
            Y: =imgloaderBS.Y+imgloaderBS.Height
            ZIndex: =6

        lblsyncSuccessBS As label:
            Align: =Align.Center
            Font: =AllScreensCSS.RFont
            FontWeight: =FontWeight.Semibold
            Height: =100
            Size: =15
            Text: |-
                =
                    VarPopupSyncText 
            Visible: =popupSyncSuccess =true
            Width: =350
            X: =(Parent.Width-Self.Width)/2
            Y: =lblSyncSuccessPatchBS.Y+lblSyncSuccessPatchBS.Height+20
            ZIndex: =7

        btnSuccessBS As button:
            Fill: =RGBA(54, 176, 75, 1)
            Font: =AllScreensCSS.RFont
            HoverFill: =RGBA(75, 125, 6, 1)
            OnSelect: |+
                =Set(popupSyncSuccess,false);
                
            PressedBorderColor: =RGBA(1, 43, 1, 0)
            PressedFill: =Self.Fill
            Text: ="Ok"
            Visible: =false
            Width: =120
            X: =(Parent.Width-Self.Width)/2
            Y: =lblsyncSuccessBS.Y+ lblsyncSuccessBS.Height+5
            ZIndex: =8

    grpTripReportBS As group:
        Height: =5
        Width: =5
        X: =40
        Y: =40
        ZIndex: =15

        iconOuterRectangleTripReportBS As rectangle:
            Fill: =RGBA(0, 0, 0, 0.29)
            Height: =Parent.Height
            Visible: =popupTripReportSuccess
            Width: =Parent.Width
            ZIndex: =9

        iconInnerRectangleTripReportBS As rectangle:
            Fill: =RGBA(255, 255, 255, 1)
            Height: =270
            Visible: =popupTripReportSuccess
            Width: =400
            X: =(Parent.Width-Self.Width)/2
            Y: =Parent.Height/3
            ZIndex: =10

        imgInfoBS As image:
            Height: =52
            Image: =info
            Visible: =popupTripReportSuccess
            Width: =52
            X: =(Parent.Width-Self.Width)/2
            Y: =iconInnerRectangleTripReportBS.Y+20
            ZIndex: =11

        lblSuccesspopupBS As label:
            Align: =Align.Center
            Color: =RGBA(14, 161, 26, 1)
            Font: =AllScreensCSS.RFont
            FontWeight: =FontWeight.Bold
            Height: =0
            PaddingBottom: =0
            Size: =18
            Text: ="Success"
            Visible: =popupTripReportSuccess
            Width: =350
            X: =(Parent.Width-Self.Width)/2
            Y: =imgInfoBS.Y+imgInfoBS.Height
            ZIndex: =12

        lblTripReportSuccessBS As label:
            Align: =Align.Center
            Font: =AllScreensCSS.RFont
            FontWeight: =FontWeight.Semibold
            Height: =100
            Size: =15
            Text: |-
                =
                    VarPopupSyncText 
            Visible: =popupTripReportSuccess
            Width: =350
            X: =(Parent.Width-Self.Width)/2
            Y: =lblSuccesspopupBS.Y+lblSuccesspopupBS.Height+20
            ZIndex: =13

        btnPopupTripReportBS As button:
            Fill: =RGBA(54, 176, 75, 1)
            Font: =AllScreensCSS.RFont
            HoverFill: =RGBA(75, 125, 6, 1)
            OnSelect: |
                =Set(popupTripReportSuccess,false);
            PressedBorderColor: =RGBA(1, 43, 1, 0)
            PressedFill: =Self.Fill
            Text: ="Ok"
            Visible: =popupTripReportSuccess
            Width: =120
            X: =(Parent.Width-Self.Width)/2
            Y: =lblTripReportSuccessBS.Y+ lblTripReportSuccessBS.Height+5
            ZIndex: =14

